Example 1: 
Given a string s, return true if it is a palindrome, false otherwise.

A string is a palindrome if it reads the same forward as backward. That means, after reversing it, it is still the same string. 

For example: "abcdcba", or "racecar".

Hint:
-----
To start, we check the first and last characters using two separate pointers.
To check the next pair of characters, we just need to move our pointers toward each other one position.
We continue until 
a. The pointers meet each other (or)
b. We find a mismatch.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 2:
Given a sorted array of unique integers and a target integer, return true if there exists a pair of numbers that sum to target, false otherwise.
This problem is similar to Two Sum. (In Two Sum, the input is not sorted).

For example, given nums = [1, 2, 4, 6, 8, 9, 14, 15] and target = 13, return true because 4 + 9 = 13.

Hint:
-----
Because the array is sorted, we can use two pointers approach to improve to an O(n) time complexity.

Algorithm:
----------
To implement this algorithm, we use a similar process as in the previous palindrome example.

We use a while loop until the pointers meet each other. If at any point the sum is equal to the target, 
we can return true. 

If the pointers meet each other, it means we went through the entire input without finding target, so we return false.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 3: Given two "sorted" integer arrays arr1 and arr2, return a new array that combines both of them and is also sorted.

Algorithm:
----------
We can build the answer array ans one element at a time. Start two pointers at the first index of each array, and compare their elements. 
At each iteration, we have 2 values. Whichever value is lower needs to come first in the answer, so add it to the answer and move the respective pointer.

For example, num1 = [1, 4, 7, 20], num2 = [3, 5, 6]
Output = [1, 3, 4, 5, 6, 7, 20]

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 4: Is Subsequence.

Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a sequence of characters that can be obtained by deleting some (or none) of the characters 
from the original string, while maintaining the relative order of the remaining characters.

Example:
"ace" is subsequence of "abcde"
"aec" is not a subsequence of "abcde"
"abc" is subsequence of "ahbgdc"
"axc" is not a subsequence of "ahbgdc"
